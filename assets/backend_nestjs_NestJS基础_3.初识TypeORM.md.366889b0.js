import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.01edc906.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/nestjs/NestJS基础/3.初识TypeORM.md","filePath":"backend/nestjs/NestJS基础/3.初识TypeORM.md"}'),p={name:"backend/nestjs/NestJS基础/3.初识TypeORM.md"},o=l(`<h3 id="一-orm是什么" tabindex="-1">一.ORM是什么? <a class="header-anchor" href="#一-orm是什么" aria-label="Permalink to &quot;一.ORM是什么?&quot;">​</a></h3><hr><p><strong>定义</strong>：<code>ORM</code> ( Object Relational Mapping） 对象关系映射，其主要作用是在编程中，把面向对象的概念跟数据库中的概念对应起来。</p><p><strong>举例</strong>：定义一个<code>对象</code>，那就对应着一张表，这个对象的<code>实例</code>，就对应着表中的一条<code>记录</code></p><p><strong>传统SQL</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> id, first_name, </span><span style="color:#F97583;">last</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;">, phone, birth_date, sex </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> persons</span></span>
<span class="line"><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">execSql</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">sql</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res[O] [&#39;FIRST_NAME&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> id, first_name, </span><span style="color:#D73A49;">last</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">name</span><span style="color:#24292E;">, phone, birth_date, sex </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> persons</span></span>
<span class="line"><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">db</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">execSql</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">sql</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> res[O] [&#39;FIRST_NAME&#39;]</span></span></code></pre></div><p><strong>ORM写法</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Person.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">）</span></span>
<span class="line"><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.first_name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Person.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">）</span></span>
<span class="line"><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.first_name</span></span></code></pre></div><h4 id="为什么使用orm" tabindex="-1"><strong>为什么使用ORM？</strong> <a class="header-anchor" href="#为什么使用orm" aria-label="Permalink to &quot;**为什么使用ORM？**&quot;">​</a></h4><p>当我们实现一个应用程序时（不使用O/R Mapping），我们可能会写特别多数据访问层的代码，从数据库保存、删除、读取对象信息，而这些代码都是重复的。</p><p>而使用ORM则会大大减少重复性代码。对象关系映射（Object Relational Mapping，简称ORM），主要实现程序对象到关系数据库数据的映射。</p><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li>方便维护：数据模型定义在同一个地方，利于重构</li><li>提高开发效率，降低开发成本</li><li>代码量少、对接多种库：代码逻辑更易懂</li><li><strong>工具多、自动化能力强：数据库删除关联数据、事务操作等</strong></li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>自动化进行关系数据库的映射需要消耗系统性能。其实这里的性能消耗还好啦，一般来说都可以忽略之。</li><li>在处理多表联查、where条件复杂之类的查询时，ORM的语法会变得复杂。</li></ul><h3 id="二-数据库相关概念" tabindex="-1">二.数据库相关概念 <a class="header-anchor" href="#二-数据库相关概念" aria-label="Permalink to &quot;二.数据库相关概念&quot;">​</a></h3><hr><blockquote><p>关系型数据库，是指采用了<code>关系模型</code>来组织数据的数据库。</p><p><code>NoSQL</code>是对不同于传统的关系数据库的数据库管理系统的统称。</p></blockquote><h4 id="啥是关系模型" tabindex="-1">啥是关系模型？ <a class="header-anchor" href="#啥是关系模型" aria-label="Permalink to &quot;啥是关系模型？&quot;">​</a></h4><p>关系模型本质上就是若干个存储数据的二维“表”</p><h4 id="什么是erd图" tabindex="-1">什么是ERD图？ <a class="header-anchor" href="#什么是erd图" aria-label="Permalink to &quot;什么是ERD图？&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img@main/blog/image-20230912193539492.png" alt="image-20230912193539492"></p><h4 id="数据库相关工具" tabindex="-1">数据库相关工具 <a class="header-anchor" href="#数据库相关工具" aria-label="Permalink to &quot;数据库相关工具&quot;">​</a></h4><ul><li>ERD设计：Navicat、 dbdesigner、QuicKDBD等在线工具</li><li>数据库设计参考 :<a href="https://open.yesapi.cn/list.html" target="_blank" rel="noreferrer">open.yesapi.cn/list.html </a></li></ul><h4 id="常见数据库" tabindex="-1">常见数据库 <a class="header-anchor" href="#常见数据库" aria-label="Permalink to &quot;常见数据库&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img@main/blog/image-20230912193828393.png" alt="image-20230912193828393"></p><h4 id="关系型数据库特点" tabindex="-1">关系型数据库特点 <a class="header-anchor" href="#关系型数据库特点" aria-label="Permalink to &quot;关系型数据库特点&quot;">​</a></h4><ul><li>优点：易于维护、使用方便、支持复杂查询效率高</li><li>缺点：读写性能差，灵活性差</li><li><strong>场景：各类业务系统、管理系统、安全性较高的场景</strong></li></ul><h4 id="非关系型数据库特点" tabindex="-1">非关系型数据库特点 <a class="header-anchor" href="#非关系型数据库特点" aria-label="Permalink to &quot;非关系型数据库特点&quot;">​</a></h4><ul><li>优点：易于扩展，大文件仔储，查询速度快</li><li>缺点：复杂计算与联合查询效率低</li><li><strong>场景：多格式&amp;海量数据、分布式消息系统、统计排行</strong></li></ul><h3 id="三-typeorm使用" tabindex="-1">三.TypeORM使用 <a class="header-anchor" href="#三-typeorm使用" aria-label="Permalink to &quot;三.TypeORM使用&quot;">​</a></h3><hr><blockquote><p><a href="https://typeorm.bootcss.com/" target="_blank" rel="noreferrer">TypeORM</a> 无疑是 <code>node.js</code> 世界中最成熟的对象关系映射器（<code>ORM</code> ）</p><p>由于它是用 <code>TypeScript</code> 编写的，所以它在 <code>Nest</code> 框架下运行得非常好。</p></blockquote><h4 id="安装依赖" tabindex="-1"><strong>安装依赖</strong> <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;**安装依赖**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@nestjs/typeorm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typeorm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@nestjs/typeorm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typeorm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql2</span></span></code></pre></div><blockquote><p>封装database提供者函数，设置配置项，数据库连接<code>Connection</code></p><p>database.providers.ts</p></blockquote><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { DataSource } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;typeorm&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">databaseProviders</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    provide: </span><span style="color:#9ECBFF;">&#39;DATA_SOURCE&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">useFactory</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dataSource</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSource</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&#39;mysql&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        host: </span><span style="color:#9ECBFF;">&#39;localhost&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        port: </span><span style="color:#79B8FF;">3306</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        username: </span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        password: </span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        database: </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        entities: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            __dirname </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/../**/*.entity{.ts,.js}&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//同步本地的schema与数据库 -&gt; 初始化的时候去使用</span></span>
<span class="line"><span style="color:#E1E4E8;">        synchronize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataSource.</span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { DataSource } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;typeorm&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">databaseProviders</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    provide: </span><span style="color:#032F62;">&#39;DATA_SOURCE&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">useFactory</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dataSource</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSource</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&#39;mysql&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        host: </span><span style="color:#032F62;">&#39;localhost&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        port: </span><span style="color:#005CC5;">3306</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        username: </span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        password: </span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        database: </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        entities: [</span></span>
<span class="line"><span style="color:#24292E;">            __dirname </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/../**/*.entity{.ts,.js}&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//同步本地的schema与数据库 -&gt; 初始化的时候去使用</span></span>
<span class="line"><span style="color:#24292E;">        synchronize: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataSource.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><blockquote><p>在database模块中使用提供者</p><p>database.module.ts</p></blockquote><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { databaseProviders } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./database.providers&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">databaseProviders],</span></span>
<span class="line"><span style="color:#E1E4E8;">  exports: [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">databaseProviders],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DatabaseModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { databaseProviders } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./database.providers&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  providers: [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">databaseProviders],</span></span>
<span class="line"><span style="color:#24292E;">  exports: [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">databaseProviders],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseModule</span><span style="color:#24292E;"> {}</span></span></code></pre></div><h4 id="存储库模式" tabindex="-1">存储库模式 <a class="header-anchor" href="#存储库模式" aria-label="Permalink to &quot;存储库模式&quot;">​</a></h4><p><a href="https://github.com/typeorm/typeorm" target="_blank" rel="noreferrer">TypeORM</a> 支持存储库设计模式，因此每个实体都有自己的存储库。这些存储库可以从数据库连接中获取。</p><p>首先，我们需要一个实体，建立<code>Photo</code> 实体。</p><blockquote><p>photo.entity.ts</p></blockquote><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Entity, Column, PrimaryGeneratedColumn } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;typeorm&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Entity</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Photo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">PrimaryGeneratedColumn</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">Column</span><span style="color:#E1E4E8;">({ length: </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;text&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">Column</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;int&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">views</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">Column</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">isPublished</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Entity, Column, PrimaryGeneratedColumn } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;typeorm&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Entity</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Photo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">PrimaryGeneratedColumn</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">Column</span><span style="color:#24292E;">({ length: </span><span style="color:#005CC5;">500</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">Column</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;text&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">Column</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">Column</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;int&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">views</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">Column</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">isPublished</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>数据库连接是 <strong>异步的</strong>，但 <code>Nest</code> 使最终用户完全看不到这个过程。<code>PhotoRepository</code> 正在等待数据库连接时，并且<code>PhotoService</code> 会被延迟，直到存储库可以使用。整个应用程序可以在每个类实例化时启动。</p><blockquote><p>photo.module.ts</p></blockquote><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { DatabaseModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../database/database.module&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { photoProviders } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./photo.providers&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { PhotoService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./photo.service&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [DatabaseModule],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">photoProviders,</span></span>
<span class="line"><span style="color:#E1E4E8;">    PhotoService,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PhotoModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { DatabaseModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../database/database.module&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { photoProviders } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./photo.providers&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { PhotoService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./photo.service&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [DatabaseModule],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">photoProviders,</span></span>
<span class="line"><span style="color:#24292E;">    PhotoService,</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PhotoModule</span><span style="color:#24292E;"> {}</span></span></code></pre></div><h3 id="四-prisma对比typeorm" tabindex="-1">四.Prisma对比TypeORM <a class="header-anchor" href="#四-prisma对比typeorm" aria-label="Permalink to &quot;四.Prisma对比TypeORM&quot;">​</a></h3><blockquote><p>虽然 Prisma 和 TypeORM 解决了类似的问题，但它们的工作方式却截然不同。</p><p><strong>TypeORM</strong>是一种传统的 ORM，它将<em>表</em>映射到<em>模型类</em>。这些模型类可用于生成 SQL 迁移。然后，模型类的实例在运行时为应用程序提供 CRUD 查询的接口。</p><p><strong>Prisma</strong>是一种新型 ORM，可以缓解传统 ORM 的许多问题，例如模型实例臃肿、业务与存储逻辑混合、缺乏类型安全或由延迟加载等导致的不可预测的查询。</p></blockquote><h4 id="prisma的优势" tabindex="-1"><strong>Prisma的优势：</strong> <a class="header-anchor" href="#prisma的优势" aria-label="Permalink to &quot;**Prisma的优势：**&quot;">​</a></h4><ul><li>更精简：Prisma的目标是尽可能简化开发，让开发者更专注于业务逻辑而非数据访问层。</li><li>更易于学习：Prisma的语法更加清晰和简单，相对TypeORM来说更容易上手。</li><li>强类型支持：Prisma使用TypeScript作为底层语言，提供严格类型支持，可以减少在底层和数据模型之间发生的错误。</li><li>更好的性能：Prisma使用批量查询和预加载等技术，可以大大提升数据库访问性能，避免了N+1查询等性能问题。</li><li>支持访问关系数据库、MongoDB和GraphQL数据源。</li></ul><h4 id="typeorm的优势" tabindex="-1"><strong>TypeORM的优势：</strong> <a class="header-anchor" href="#typeorm的优势" aria-label="Permalink to &quot;**TypeORM的优势：**&quot;">​</a></h4><ul><li>更加成熟：TypeORM在市场上已经存在较长时间，具有更广泛的用户群体和更周全的文档和社区支持。</li><li>支持多种数据库类型：TypeORM支持关系型数据库和一些NoSQL数据库，如MySQL、PostgreSQL、Oracle、MongoDB等。</li><li>丰富的特性：TypeORM提供了广泛的特性，如实体、仓储、查询构建器等，可以满足各种应用程序的需求。</li><li>易扩展性：TypeORM提供了广泛的插件和模块，可以扩展和自定义其功能。</li><li>支持在浏览器中使用：TypeORM提供了可在浏览器中使用的版本，可以用于Web应用程序和Web扩展。</li></ul>`,53),e=[o];function t(r,c,E,y,i,d){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{h as __pageData,m as default};
