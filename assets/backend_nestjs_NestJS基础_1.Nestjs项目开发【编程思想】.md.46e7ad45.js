import{_ as s,o as e,c as a,Q as o}from"./chunks/framework.01edc906.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/nestjs/NestJS基础/1.Nestjs项目开发【编程思想】.md","filePath":"backend/nestjs/NestJS基础/1.Nestjs项目开发【编程思想】.md"}'),l={name:"backend/nestjs/NestJS基础/1.Nestjs项目开发【编程思想】.md"},t=o(`<h2 id="一-前端人的视角来看后端项目" tabindex="-1">一.前端人的视角来看后端项目 <a class="header-anchor" href="#一-前端人的视角来看后端项目" aria-label="Permalink to &quot;一.前端人的视角来看后端项目&quot;">​</a></h2><h3 id="_1-前端是否-html-css-js" tabindex="-1">1.前端是否=HTML/CSS/JS ？？ <a class="header-anchor" href="#_1-前端是否-html-css-js" aria-label="Permalink to &quot;1.前端是否=HTML/CSS/JS ？？&quot;">​</a></h3><br><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img/blog/image-20230911213600146.png" alt="image-20230911213600146"><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img/blog/image-20230911214004413.png" alt="image-20230911214004413"><h3 id="_2-怎么样学习后端" tabindex="-1">2.怎么样学习后端 <a class="header-anchor" href="#_2-怎么样学习后端" aria-label="Permalink to &quot;2.怎么样学习后端&quot;">​</a></h3><p>​ <strong><code> 浏览器</code>—<code>Internet</code>——<code>API</code>——<code>web服务</code>——<code>数据库</code></strong></p><p>​ 为什么需要数据库，页面很多数据是私密的，不希望所有用户都查看这些数据，服务器安全，SQL等</p><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img/blog/image-20230911214057986.png" alt="image-20230911214250306"><hr><h2 id="二-常见的后端概念-oop-aop-ioc-di等" tabindex="-1">二.常见的后端概念（OOP，AOP，IOC，DI等） <a class="header-anchor" href="#二-常见的后端概念-oop-aop-ioc-di等" aria-label="Permalink to &quot;二.常见的后端概念（OOP，AOP，IOC，DI等）&quot;">​</a></h2><h3 id="_1-fp-frp和oop" tabindex="-1">1.FP&amp;FRP和OOP <a class="header-anchor" href="#_1-fp-frp和oop" aria-label="Permalink to &quot;1.FP&amp;FRP和OOP&quot;">​</a></h3><p><strong>函数式编程 (Functional Programming)</strong></p><ul><li><p>确定的数据输入、输出；没有“副”作用（不会影响外界的状态改变），相对独立</p></li><li><p>引用透明，对IDE友好，易于理解</p></li><li><p>如今主流的vue/react的书写方式</p></li></ul><p><strong>面相对象式编程(Object Oriented Programming)</strong></p><ul><li><p>抽象现象生活的事务特征，对于理解友好</p></li><li><p>封装性（高内聚低耦合）、继承性、多态性</p></li><li><p>Java、C#典型的面相对象的编程语言</p></li></ul><p><strong>函数式响应式编程</strong></p><ul><li><p>适合需要对事件流进行复杂组合应用场景</p></li><li><p>响应式多用在异步的场景</p></li><li><p>典型案例：rxjs，广告推荐等（类似于发布订阅方式）</p></li></ul><h3 id="_2-什么是aop" tabindex="-1">2.什么是AOP？ <a class="header-anchor" href="#_2-什么是aop" aria-label="Permalink to &quot;2.什么是AOP？&quot;">​</a></h3><p><strong>面相切面编程（Aspect Oriented Programming）</strong></p><ul><li><p>扩展功能方便，不影响业务之间的逻辑</p></li><li><p>逻辑集中管理</p></li><li><p>更有利于代码复用（解决OOP的缺陷）</p></li></ul><p><strong><code>AOP能在不破坏封装功能的前提下，额外增加功能</code></strong></p><p>中间件、管道、异常过滤器、守卫、拦截器等</p><h3 id="_3-控制反转-ioc-和依赖注入-di" tabindex="-1">3.控制反转（IOC）和依赖注入（DI） <a class="header-anchor" href="#_3-控制反转-ioc-和依赖注入-di" aria-label="Permalink to &quot;3.控制反转（IOC）和依赖注入（DI）&quot;">​</a></h3><p><strong><code>IOC是一种思想&amp;设计模式 DI是IOC的具体实现</code></strong></p><p><strong>控制反转</strong> (inversion of Control）是一种是面向对象编程中的一种设计原则，用来<code>减低</code>计算机代码之间的<code>耦合度</code>。其基本思想是：借助于&quot;第三方&quot;实现具有依赖关·系的对象之间的解耦。</p><p><strong>依赖注入</strong>(bependency Injection）是一种用于实现IOC的设计模式，它<code>允许在类外创建依赖对象</code>，并通过不同的方式将这些对象<code>提供给类</code>。</p><hr><h2 id="三-nestjs架构-学习核心概念" tabindex="-1">三.Nestjs架构，学习核心概念 <a class="header-anchor" href="#三-nestjs架构-学习核心概念" aria-label="Permalink to &quot;三.Nestjs架构，学习核心概念&quot;">​</a></h2><h3 id="_1-nestjs的核心概念" tabindex="-1">1.Nestjs的核心概念 <a class="header-anchor" href="#_1-nestjs的核心概念" aria-label="Permalink to &quot;1.Nestjs的核心概念&quot;">​</a></h3><p>客户端 ⇢ 控制器 ⇢ 服务 ⇢ 数据接入</p><ul><li><p>Controller层负责处理请求、返回响应。</p></li><li><p>Service层负责提供方法和操作，只包含业务逻辑</p></li><li><p>Data Access层负责访问数据库中的数据</p></li></ul><p><strong>Nest应用生命周期‼️</strong></p><blockquote><p><strong>客户端 ⇢ 中间件 ⇢ 守卫 ⇢ 拦截器 ⇢管道 ⇢ 控制器 ⇢ 服务 ⇢ 拦截器 ⇢ 过滤器 ⇢ 响应 ⇢ 客户端</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img/blog/image-20230911210255598.png" alt="image-20230911210255598"></p><p>拦截器类似于Express，Koa中的洋葱模式</p><h3 id="_2-nestjs用模块来组织代码" tabindex="-1">2.Nestjs用模块来组织代码 <a class="header-anchor" href="#_2-nestjs用模块来组织代码" aria-label="Permalink to &quot;2.Nestjs用模块来组织代码&quot;">​</a></h3><ul><li><p>使用Module来组织应用</p></li><li><p>@Module装饰器来描述模块</p></li><li><p>模块中有4大属性：<strong><code>imports</code>、<code>providers</code>、<code>controllers</code>、<code>exports</code></strong></p></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [OtherModule],</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [UserController],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [UserService],</span></span>
<span class="line"><span style="color:#E1E4E8;">  exports:[UserService]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [OtherModule],</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [UserController],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [UserService],</span></span>
<span class="line"><span style="color:#24292E;">  exports:[UserService]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserModule</span><span style="color:#24292E;"> {}</span></span></code></pre></div><blockquote><p><strong>可以用积木来理解模块概念：分开是独立的，组合在一起又是一个整体，高内聚，低耦合，减少重复代码，提升代码可维护性</strong></p></blockquote><p><strong>四大模块：功能模块、共享模块、全局模块、动态模块</strong></p><ul><li>功能模块与共享模块是一回事，只是叫法不同</li><li>全局模块通常应用在配置、数据库连接、日志上</li><li>动态模块是在使用模块的时候才初始化（前端懒加载）</li></ul><h3 id="_3-mvc是什么-dto-dao" tabindex="-1">3.MVC是什么？DTO？DAO？ <a class="header-anchor" href="#_3-mvc是什么-dto-dao" aria-label="Permalink to &quot;3.MVC是什么？DTO？DAO？&quot;">​</a></h3><p><strong>MVC是一种软件架构模式</strong></p><p><strong>模型、视图、控制器（Mode View Controller）</strong></p><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img/blog/image-20230911212347889.png" alt="image-20230911212347889"><h4 id="nestjs中的mvc" tabindex="-1">Nestjs中的MVC <a class="header-anchor" href="#nestjs中的mvc" aria-label="Permalink to &quot;Nestjs中的MVC&quot;">​</a></h4><ul><li><p>Nestjs可以通过模版库实现View层，常见：puhg，hus，ejs等</p></li><li><p>Nestjs默认集成express作为web服务器，可以换成kos/fastify</p></li><li><p>Controller响应前端的请求，Model是对应的具体的数据库逻辑</p></li></ul><h4 id="dto数据传输对象-data-transfer-object" tabindex="-1">DTO数据传输对象（Data Transfer Object） <a class="header-anchor" href="#dto数据传输对象-data-transfer-object" aria-label="Permalink to &quot;DTO数据传输对象（Data Transfer Object）&quot;">​</a></h4><ul><li><p>接受部分数据</p></li><li><p>对数据进行筛选</p></li><li><p>不对应实体</p></li><li><p>属性是小于等于实体</p></li></ul><blockquote><h4 id="nestjs中的dto约定了数据字段、属性方便数据校验-类型" tabindex="-1"><strong>Nestjs中的DTO约定了数据字段、属性方便数据校验（类型）</strong> <a class="header-anchor" href="#nestjs中的dto约定了数据字段、属性方便数据校验-类型" aria-label="Permalink to &quot;**Nestjs中的DTO约定了数据字段、属性方便数据校验（类型）**&quot;">​</a></h4></blockquote><h4 id="dao数据访问对象-data-access-objiect" tabindex="-1">DAO数据访问对象 （Data Access Objiect） <a class="header-anchor" href="#dao数据访问对象-data-access-objiect" aria-label="Permalink to &quot;DAO数据访问对象 （Data Access Objiect）&quot;">​</a></h4><ul><li><p>对接数据库接口</p></li><li><p>不暴露数据库的内部信息</p></li><li><p>对应实体</p></li></ul><blockquote><p><strong>Nestjs中的DAO是一层逻辑：包含实体类、数据库操作(CURD)、数据校验、 错误处理等</strong></p></blockquote><blockquote><p><strong>Nestjs做了一层更高级的封装，通过ORM库与种类数据库对接，而这些ORM库就是DAO层。</strong></p></blockquote>`,55),n=[t];function r(p,i,c,d,h,u){return e(),a("div",null,n)}const b=s(l,[["render",r]]);export{m as __pageData,b as default};
