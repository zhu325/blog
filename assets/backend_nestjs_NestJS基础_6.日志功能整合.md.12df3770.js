import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7204edfa.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/nestjs/NestJS基础/6.日志功能整合.md","filePath":"backend/nestjs/NestJS基础/6.日志功能整合.md"}'),p={name:"backend/nestjs/NestJS基础/6.日志功能整合.md"},o=l(`<h3 id="一-关于日志简述" tabindex="-1">一.关于日志简述 <a class="header-anchor" href="#一-关于日志简述" aria-label="Permalink to &quot;一.关于日志简述&quot;">​</a></h3><hr><h4 id="什么是日志" tabindex="-1">什么是日志? <a class="header-anchor" href="#什么是日志" aria-label="Permalink to &quot;什么是日志?&quot;">​</a></h4><p>日志对于程序来说是一种非常重要的调试于监控的工具。在开发时(Development time)，日志是观察程序动态情况的窗口。在运行时(Run time)，日志可以实时反应被监控程序的各种指标，甚至包括硬件状况；也可以用于事后分析故障原因。可以说，用好日志工具，是管理和维护被开发系统的必要手段的途径。</p><h4 id="日志的主要等级" tabindex="-1">日志的主要等级 <a class="header-anchor" href="#日志的主要等级" aria-label="Permalink to &quot;日志的主要等级&quot;">​</a></h4><ul><li><code>Log</code>：通用日志，按需进行记录（打印）</li><li><code>Warning</code>：警告日志，比如尝试多次进行数据库操作</li><li><code>Error</code>：严重日志，比如数据库异常</li><li><code>Debug</code>：调试日志，比如加载数据日志、</li><li><code>Verbose</code>：详细日志，所以的操作与详细信息（非必要不打印）</li></ul><h4 id="日志需要怎么记录错误并定位问题" tabindex="-1">日志需要怎么记录错误并定位问题？ <a class="header-anchor" href="#日志需要怎么记录错误并定位问题" aria-label="Permalink to &quot;日志需要怎么记录错误并定位问题？&quot;">​</a></h4><p>主要就是以下三点：什么时间发生的？发生了什么事情？错误是什么？</p><h4 id="为什么要先写日志文件后写数据库" tabindex="-1">为什么要先写日志文件后写数据库? <a class="header-anchor" href="#为什么要先写日志文件后写数据库" aria-label="Permalink to &quot;为什么要先写日志文件后写数据库?&quot;">​</a></h4><p>写入日志文件和数据库前后顺序的选择很大程度取决于系统的可靠性需求。如果先写入数据库，并且在写入日志文件之前数据库已经出现故障，则数据可能会丢失。但是，如果先写入日志文件，即使数据库故障，也可以通过日志文件恢复数据。因此，通常先写日志文件再写数据库是一种更可靠的方法。</p><h3 id="二-nest内置日志模块" tabindex="-1">二. Nest内置日志模块 <a class="header-anchor" href="#二-nest内置日志模块" aria-label="Permalink to &quot;二. Nest内置日志模块&quot;">​</a></h3><hr><h4 id="日志等级" tabindex="-1">日志等级 <a class="header-anchor" href="#日志等级" aria-label="Permalink to &quot;日志等级&quot;">​</a></h4><p>在<code>@nestjs</code>的源码中能够找到关于日志的等级定义，有底到高依次如下</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// packages/common/services/utils/is-log-level-enabled.utils.ts</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LOG_LEVEL_VALUES</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">LogLevel</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  verbose: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  debug: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  log: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  warn: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  error: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// packages/common/services/utils/is-log-level-enabled.utils.ts</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">LOG_LEVEL_VALUES</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">LogLevel</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  verbose: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  debug: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  log: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  warn: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  error: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>不难看出，作者根据信息的重要程度给日志类型加以区分，让用户可以根据程序所运行的环境不同，而输出信息价值不同的日志。例如在运行时，可能就不关注<strong>警告</strong>级别以下的内容，在<strong>测试</strong>时，则关注<strong>日志</strong>(log)级以上的的内容，而开发和调试阶段，也有不同的关注焦点。</p><h4 id="日志格式" tabindex="-1">日志格式 <a class="header-anchor" href="#日志格式" aria-label="Permalink to &quot;日志格式&quot;">​</a></h4><p>当我们用日志工具输出信息时，默认格式如下：</p><blockquote><p>[AppName] [PID] [Timestamp] [LogLevel] [Context] Message [+ms]</p></blockquote><ul><li>AppName 应用程序名，被固定为<code>[Nest]</code></li><li>PID：系统分配的进程编号</li><li>Timestamp：当前日志输出的系统时间，默认月/日/年, 时:分:秒[AP]M</li><li>LogLevel：日志等级文本</li><li>Context：上下文</li><li>Message：输出的消息，可以是对象类型(JSON.stringify)输出</li><li>+ms：两次输出信息的时间间隔，时间戳（后文提及的时间戳均指此）</li></ul><h4 id="类的结构" tabindex="-1">类的结构 <a class="header-anchor" href="#类的结构" aria-label="Permalink to &quot;类的结构&quot;">​</a></h4><p><code>@nestjs</code> 的日志类位于<code>common</code> 包中，关键要素的结构如下：</p><pre><code>                  Interface
               ┌───────────────┐
       ┌──────►│ LoggerService │
       │       └──────▲────────┘
       │              │
       │              │ Implementation
       │       ┌──────┴────────┐
       │       │ ConsoleLogger │
       │       └──────▲────────┘
       │              │
       │              │ Dependance
       │       ┌──────┴────────┐
       └───────┤     Logger    │
 Implementation└───────────────┘
</code></pre><ul><li><code>LoggerService</code> 是接口标准，如果要替换掉内置的日志类，最低要求是得符合这个接口。</li><li><code>ConsoleLogger</code> 日志主要业务类，主要负责处理格式化日志字符串输出。</li><li><code>Logger</code> 更高层高层封装，加入了输出缓存，并统一管理日志等级。自身有一个<code>ConsoleLogger</code>的默认单例。</li></ul><p>一般直接使用<code>Logger</code> 就可以，虽然可以直接用<code>ConsoleLogger</code> 但是这会造成日志等级难以统一的问题（某些情景下这不是问题而是<strong>特性</strong>）。</p><h4 id="在main-ts入口文件内调整日志信息" tabindex="-1">在<code>main.ts</code>入口文件内调整日志信息 <a class="header-anchor" href="#在main-ts入口文件内调整日志信息" aria-label="Permalink to &quot;在\`main.ts\`入口文件内调整日志信息&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bootstrap</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> NestFactory.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(AppModule, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 可以关闭整个nestjs日志</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// logger: false,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 显示不同日志等级</span></span>
<span class="line"><span style="color:#E1E4E8;">    logger: [</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;warn&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bootstrap</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> NestFactory.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(AppModule, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 可以关闭整个nestjs日志</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// logger: false,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 显示不同日志等级</span></span>
<span class="line"><span style="color:#24292E;">    logger: [</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;warn&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="手动实例化——面向对象" tabindex="-1">手动实例化——面向对象 <a class="header-anchor" href="#手动实例化——面向对象" aria-label="Permalink to &quot;手动实例化——面向对象&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Logger } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bootstrap</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> NestFactory.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(AppModule)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">logger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Logger</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  logger.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`app started at port 3000\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  logger.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`app started at port 3000\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`app started at port 3000\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Logger } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bootstrap</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> NestFactory.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(AppModule)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">logger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Logger</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  logger.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`app started at port 3000\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  logger.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`app started at port 3000\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  logger.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`app started at port 3000\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在模块中使用</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Controller, Logger } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">logger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Logger</span><span style="color:#E1E4E8;">(UserController.name)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.logger.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;UserController init&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Controller, Logger } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#E36209;">logger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Logger</span><span style="color:#24292E;">(UserController.name)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.logger.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;UserController init&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时，已经可以获得比较完善的日志输出信息：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">[Nest]</span><span style="color:#E1E4E8;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [NestFactory] Starting Nest application...</span></span>
<span class="line"><span style="color:#B392F0;">[Nest]</span><span style="color:#E1E4E8;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [InstanceLoader] AppModule dependencies initialized +12ms</span></span>
<span class="line"><span style="color:#B392F0;">[Nest]</span><span style="color:#E1E4E8;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [RoutesResolver] AppController {/}: +20ms</span></span>
<span class="line"><span style="color:#B392F0;">[Nest]</span><span style="color:#E1E4E8;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [RouterExplorer] Mapped {/, GET} route +2ms</span></span>
<span class="line"><span style="color:#B392F0;">[Nest]</span><span style="color:#E1E4E8;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [NestApplication] Nest application successfully started +2ms</span></span>
<span class="line"><span style="color:#B392F0;">[Nest]</span><span style="color:#E1E4E8;"> 32648  - 09/13/2023, 2:08:49 PM     LOG [AppController] UserController init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">[Nest]</span><span style="color:#24292E;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [NestFactory] Starting Nest application...</span></span>
<span class="line"><span style="color:#6F42C1;">[Nest]</span><span style="color:#24292E;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [InstanceLoader] AppModule dependencies initialized +12ms</span></span>
<span class="line"><span style="color:#6F42C1;">[Nest]</span><span style="color:#24292E;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [RoutesResolver] AppController {/}: +20ms</span></span>
<span class="line"><span style="color:#6F42C1;">[Nest]</span><span style="color:#24292E;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [RouterExplorer] Mapped {/, GET} route +2ms</span></span>
<span class="line"><span style="color:#6F42C1;">[Nest]</span><span style="color:#24292E;"> 32648  - 09/13/2023, 2:08:48 PM     LOG [NestApplication] Nest application successfully started +2ms</span></span>
<span class="line"><span style="color:#6F42C1;">[Nest]</span><span style="color:#24292E;"> 32648  - 09/13/2023, 2:08:49 PM     LOG [AppController] UserController init</span></span></code></pre></div><h3 id="三-pino的使用-懒人" tabindex="-1">三.Pino的使用（懒人） <a class="header-anchor" href="#三-pino的使用-懒人" aria-label="Permalink to &quot;三.Pino的使用（懒人）&quot;">​</a></h3><hr><h4 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nestjs-pino</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pino-pretty</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 格式化日志</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pino-roll</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 文件展示</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nestjs-pino</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pino-pretty</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 格式化日志</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pino-roll</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 文件展示</span></span></code></pre></div><h4 id="导入到模块中-注册并配置日志" tabindex="-1">导入到模块中，注册并配置日志 <a class="header-anchor" href="#导入到模块中-注册并配置日志" aria-label="Permalink to &quot;导入到模块中，注册并配置日志&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { LoogerModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;nest-pino&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    LoogerModule.</span><span style="color:#B392F0;">forRoot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      pinoHttp: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        transport:</span></span>
<span class="line"><span style="color:#E1E4E8;">          p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;development&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              	level: </span><span style="color:#9ECBFF;">&#39;info&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                target: </span><span style="color:#9ECBFF;">&#39;pino-pretty&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  colorize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              	level: </span><span style="color:#9ECBFF;">&#39;info&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                target: </span><span style="color:#9ECBFF;">&#39;pino-roll&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                option: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  file: </span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;logs&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;log.txt&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                  frequency: </span><span style="color:#9ECBFF;">&#39;daily&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// hourly</span></span>
<span class="line"><span style="color:#E1E4E8;">                  size:</span><span style="color:#9ECBFF;">&#39;10m&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  mkdir: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">              },</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [AppService],</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [AppController],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { LoogerModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;nest-pino&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [</span></span>
<span class="line"><span style="color:#24292E;">    LoogerModule.</span><span style="color:#6F42C1;">forRoot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      pinoHttp: {</span></span>
<span class="line"><span style="color:#24292E;">        transport:</span></span>
<span class="line"><span style="color:#24292E;">          p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;development&#39;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              	level: </span><span style="color:#032F62;">&#39;info&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                target: </span><span style="color:#032F62;">&#39;pino-pretty&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                options: {</span></span>
<span class="line"><span style="color:#24292E;">                  colorize: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              	level: </span><span style="color:#032F62;">&#39;info&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                target: </span><span style="color:#032F62;">&#39;pino-roll&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                option: {</span></span>
<span class="line"><span style="color:#24292E;">                  file: </span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;logs&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;log.txt&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                  frequency: </span><span style="color:#032F62;">&#39;daily&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// hourly</span></span>
<span class="line"><span style="color:#24292E;">                  size:</span><span style="color:#032F62;">&#39;10m&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  mkdir: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">              },</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [AppService],</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [AppController],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="四-winston的使用-勤快" tabindex="-1">四.Winston的使用（勤快） <a class="header-anchor" href="#四-winston的使用-勤快" aria-label="Permalink to &quot;四.Winston的使用（勤快）&quot;">​</a></h3><hr><h4 id="安装依赖-1" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖-1" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nest-winston</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">winston</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">winston-daily-rotate-file</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 修改文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nest-winston</span><span style="color:#24292E;"> </span><span style="color:#032F62;">winston</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">winston-daily-rotate-file</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 修改文件</span></span></code></pre></div><h4 id="在main-ts文件修改winston配置" tabindex="-1">在<code>main.ts</code>文件修改winston配置 <a class="header-anchor" href="#在main-ts文件修改winston配置" aria-label="Permalink to &quot;在\`main.ts\`文件修改winston配置&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { NestFactory } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/core&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { WinstonModule, utilities } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;nest-winston&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createLogger } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;winston&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> winston </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;winston&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AppModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./app.module&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;winston-daily-rotate-file&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bootstrap</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createLogger</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    transports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> winston.transports.</span><span style="color:#B392F0;">Console</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        level:</span><span style="color:#9ECBFF;">&#39;info&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        format: winston.format.</span><span style="color:#B392F0;">combine</span><span style="color:#E1E4E8;">(winston.format.</span><span style="color:#B392F0;">timestamp</span><span style="color:#E1E4E8;">(), utilities.format.</span><span style="color:#B392F0;">nestLike</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> winston.transports.</span><span style="color:#B392F0;">DailyRotateFile</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">     		level:</span><span style="color:#9ECBFF;">&#39;warn&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        dirname: </span><span style="color:#9ECBFF;">&#39;logs&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        filename: </span><span style="color:#9ECBFF;">&#39;logs/%DATE%.log&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        datePattern: </span><span style="color:#9ECBFF;">&#39;YYYY-MM-DD&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        zippedArchive: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        maxSize: </span><span style="color:#9ECBFF;">&#39;20m&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        maxFiles: </span><span style="color:#9ECBFF;">&#39;14d&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        format: winston.format.</span><span style="color:#B392F0;">combine</span><span style="color:#E1E4E8;">(winston.format.</span><span style="color:#B392F0;">timestamp</span><span style="color:#E1E4E8;">(), utilities.format.</span><span style="color:#B392F0;">nestLike</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> NestFactory.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(AppModule, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    logger: WinstonModule.</span><span style="color:#B392F0;">createLogger</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">bootstrap</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { NestFactory } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/core&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { WinstonModule, utilities } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;nest-winston&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createLogger } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;winston&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> winston </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;winston&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AppModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./app.module&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;winston-daily-rotate-file&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bootstrap</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createLogger</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    transports: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> winston.transports.</span><span style="color:#6F42C1;">Console</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        level:</span><span style="color:#032F62;">&#39;info&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        format: winston.format.</span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">(winston.format.</span><span style="color:#6F42C1;">timestamp</span><span style="color:#24292E;">(), utilities.format.</span><span style="color:#6F42C1;">nestLike</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> winston.transports.</span><span style="color:#6F42C1;">DailyRotateFile</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">     		level:</span><span style="color:#032F62;">&#39;warn&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        dirname: </span><span style="color:#032F62;">&#39;logs&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        filename: </span><span style="color:#032F62;">&#39;logs/%DATE%.log&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        datePattern: </span><span style="color:#032F62;">&#39;YYYY-MM-DD&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        zippedArchive: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        maxSize: </span><span style="color:#032F62;">&#39;20m&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        maxFiles: </span><span style="color:#032F62;">&#39;14d&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        format: winston.format.</span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">(winston.format.</span><span style="color:#6F42C1;">timestamp</span><span style="color:#24292E;">(), utilities.format.</span><span style="color:#6F42C1;">nestLike</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> NestFactory.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(AppModule, {</span></span>
<span class="line"><span style="color:#24292E;">    logger: WinstonModule.</span><span style="color:#6F42C1;">createLogger</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      instance,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">bootstrap</span><span style="color:#24292E;">()</span></span></code></pre></div><h4 id="在appmodule中导出logger模块" tabindex="-1">在appmodule中导出Logger模块 <a class="header-anchor" href="#在appmodule中导出logger模块" aria-label="Permalink to &quot;在appmodule中导出Logger模块&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Logger, Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AppController } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./app.controller&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AppService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./app.service&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [AppController],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [AppService, Logger],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Logger, Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AppController } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./app.controller&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AppService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./app.service&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [],</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [AppController],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [AppService, Logger],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppModule</span><span style="color:#24292E;"> {}</span></span></code></pre></div><h4 id="全局异常过滤器配合winston" tabindex="-1">全局异常过滤器配合winston <a class="header-anchor" href="#全局异常过滤器配合winston" aria-label="Permalink to &quot;全局异常过滤器配合winston&quot;">​</a></h4><p>nestjs分全局过滤器，控制器过滤器，路由过滤器三部分；如下图</p><p>内置的异常层负责处理整个应用程序中的所有抛出的异常。当捕获到未处理的异常时，最终用户将收到友好的响应。</p><p><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img@main/blog/image-230914-0eb982014b270ce444b8ccd4c58ce8261547d2.png" alt="image-20230914094438911"></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ArgumentsHost, Catch, ExceptionFilter, HttpException, LoggerService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Catch</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpExceptionFilter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExceptionFilter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">logger</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoggerService</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">exception</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpException</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArgumentsHost</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ctx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> host.</span><span style="color:#B392F0;">switchToHttp</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 响应 请求对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">getResponse</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">getRequest</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请求 状态码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">status</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> exception.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(exception.message, exception.stack)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(status).</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      statusCode: status,</span></span>
<span class="line"><span style="color:#E1E4E8;">      message: exception.message </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> exception.name,</span></span>
<span class="line"><span style="color:#E1E4E8;">      path: request.url,</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ArgumentsHost, Catch, ExceptionFilter, HttpException, LoggerService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Catch</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpExceptionFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExceptionFilter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#E36209;">logger</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoggerService</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">exception</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpException</span><span style="color:#24292E;">, </span><span style="color:#E36209;">host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArgumentsHost</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ctx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> host.</span><span style="color:#6F42C1;">switchToHttp</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 响应 请求对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getResponse</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">request</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getRequest</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请求 状态码</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">status</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> exception.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.logger.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(exception.message, exception.stack)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    response.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(status).</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      statusCode: status,</span></span>
<span class="line"><span style="color:#24292E;">      message: exception.message </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> exception.name,</span></span>
<span class="line"><span style="color:#24292E;">      path: request.url,</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="封装logs-module模块" tabindex="-1">封装<code>logs.module</code>模块 <a class="header-anchor" href="#封装logs-module模块" aria-label="Permalink to &quot;封装\`logs.module\`模块&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { LogEnum } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/enum/config.enum&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ConfigService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/config&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { WinstonModule, WinstonModuleOptions, utilities } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;nest-winston&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> winston </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;winston&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> DailyRotateFile </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;winston-daily-rotate-file&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Console } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;winston/lib/winston/transports&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { LogController } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./logs.controller&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { LogService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./logs.service&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createDailyRotateTransport</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">level</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DailyRotateFile</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    level,</span></span>
<span class="line"><span style="color:#E1E4E8;">    dirname: </span><span style="color:#9ECBFF;">&#39;logs&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">filename</span><span style="color:#9ECBFF;">}-%DATE%.log\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    datePattern: </span><span style="color:#9ECBFF;">&#39;YYYY-MM-DD-HH&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    zippedArchive: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    maxSize: </span><span style="color:#9ECBFF;">&#39;20m&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    maxFiles: </span><span style="color:#9ECBFF;">&#39;14d&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: winston.format.</span><span style="color:#B392F0;">combine</span><span style="color:#E1E4E8;">(winston.format.</span><span style="color:#B392F0;">timestamp</span><span style="color:#E1E4E8;">(), winston.format.</span><span style="color:#B392F0;">simple</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    WinstonModule.</span><span style="color:#B392F0;">forRootAsync</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      inject: [ConfigService],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">useFactory</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">configService</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigService</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">timestamp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configService.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(LogEnum.</span><span style="color:#79B8FF;">TIMESTAMP</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">conbine</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (timestamp) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          conbine.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(winston.format.</span><span style="color:#B392F0;">timestamp</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        conbine.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(utilities.format.</span><span style="color:#B392F0;">nestLike</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">consoleTransports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Console</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">          level: configService.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(LogEnum.</span><span style="color:#79B8FF;">LOG_LEVEL</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;info&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          format: winston.format.</span><span style="color:#B392F0;">combine</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">conbine),</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          transports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            consoleTransports,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">(configService.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(LogEnum.</span><span style="color:#79B8FF;">LOG_ON</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">createDailyRotateTransport</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;info&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;application&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">createDailyRotateTransport</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;warn&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []),</span></span>
<span class="line"><span style="color:#E1E4E8;">          ],</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WinstonModuleOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [LogController],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [LogService],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LogsModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { LogEnum } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/enum/config.enum&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ConfigService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/config&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { WinstonModule, WinstonModuleOptions, utilities } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;nest-winston&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> winston </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;winston&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> DailyRotateFile </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;winston-daily-rotate-file&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Console } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;winston/lib/winston/transports&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { LogController } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./logs.controller&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { LogService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./logs.service&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createDailyRotateTransport</span><span style="color:#24292E;">(</span><span style="color:#E36209;">level</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DailyRotateFile</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    level,</span></span>
<span class="line"><span style="color:#24292E;">    dirname: </span><span style="color:#032F62;">&#39;logs&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">filename</span><span style="color:#032F62;">}-%DATE%.log\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    datePattern: </span><span style="color:#032F62;">&#39;YYYY-MM-DD-HH&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    zippedArchive: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    maxSize: </span><span style="color:#032F62;">&#39;20m&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    maxFiles: </span><span style="color:#032F62;">&#39;14d&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    format: winston.format.</span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">(winston.format.</span><span style="color:#6F42C1;">timestamp</span><span style="color:#24292E;">(), winston.format.</span><span style="color:#6F42C1;">simple</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [</span></span>
<span class="line"><span style="color:#24292E;">    WinstonModule.</span><span style="color:#6F42C1;">forRootAsync</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      inject: [ConfigService],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">useFactory</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">configService</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigService</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">timestamp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configService.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(LogEnum.</span><span style="color:#005CC5;">TIMESTAMP</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;true&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">conbine</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (timestamp) {</span></span>
<span class="line"><span style="color:#24292E;">          conbine.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(winston.format.</span><span style="color:#6F42C1;">timestamp</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        conbine.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(utilities.format.</span><span style="color:#6F42C1;">nestLike</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">consoleTransports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Console</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          level: configService.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(LogEnum.</span><span style="color:#005CC5;">LOG_LEVEL</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;info&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          format: winston.format.</span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">conbine),</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          transports: [</span></span>
<span class="line"><span style="color:#24292E;">            consoleTransports,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">(configService.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(LogEnum.</span><span style="color:#005CC5;">LOG_ON</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">createDailyRotateTransport</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;info&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;application&#39;</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">createDailyRotateTransport</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;warn&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []),</span></span>
<span class="line"><span style="color:#24292E;">          ],</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WinstonModuleOptions</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [LogController],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [LogService],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogsModule</span><span style="color:#24292E;"> {}</span></span></code></pre></div><h4 id="在其他模块中使用log-module" tabindex="-1">在其他模块中使用<code>log.module</code> <a class="header-anchor" href="#在其他模块中使用log-module" aria-label="Permalink to &quot;在其他模块中使用\`log.module\`&quot;">​</a></h4><p>首先在<code>main.ts</code>中添加</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bootstrap</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">useLogger</span><span style="color:#E1E4E8;">(app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">WINSTON_MODULE_NEST_PROVIDER</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bootstrap</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">useLogger</span><span style="color:#24292E;">(app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">WINSTON_MODULE_NEST_PROVIDER</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其次再要使用控制器中添加@Inject()使用</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">   private readonly usersService: UserService,</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#B392F0;">Inject</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">WINSTON_MODULE_NEST_PROVIDER</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   private readonly logger: LoggerService,</span></span>
<span class="line"><span style="color:#E1E4E8;"> ){}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">   private readonly usersService: UserService,</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#6F42C1;">Inject</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">WINSTON_MODULE_NEST_PROVIDER</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   private readonly logger: LoggerService,</span></span>
<span class="line"><span style="color:#24292E;"> ){}</span></span></code></pre></div>`,59),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const m=s(p,[["render",t]]);export{g as __pageData,m as default};
