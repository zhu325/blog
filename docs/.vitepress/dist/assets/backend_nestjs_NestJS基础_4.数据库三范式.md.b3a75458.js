import{_ as t,o as d,c as o,Q as e}from"./chunks/framework.01edc906.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/nestjs/NestJS基础/4.数据库三范式.md","filePath":"backend/nestjs/NestJS基础/4.数据库三范式.md"}'),r={name:"backend/nestjs/NestJS基础/4.数据库三范式.md"},a=e('<h3 id="一-第一范式-1nf" tabindex="-1">一.第一范式（1NF） <a class="header-anchor" href="#一-第一范式-1nf" aria-label="Permalink to &quot;一.第一范式（1NF）&quot;">​</a></h3><hr><p><strong>如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式(1NF)。</strong></p><p>在关系型数据库的设计中，满足第一范式(1NF)是数据库设计的基本要求，也就是说只有满足了第一范式(1NF)的数据库才能叫做关系数据库。</p><p>满足第一范式的目的就是<strong>确保每列保持原子性</strong>。</p><blockquote><p>例子1：设计一张“员工”表，设计如下：</p></blockquote><table><thead><tr><th><strong>empId</strong></th><th><strong>empName</strong></th><th><strong>age</strong></th><th>sex</th><th><strong>address</strong></th></tr></thead><tbody><tr><td>1</td><td>小朱</td><td>23</td><td>m</td><td>山东省淄博市</td></tr><tr><td>2</td><td>小鲁</td><td>36</td><td>f</td><td>浙江省绍兴市</td></tr><tr><td>3</td><td>小张</td><td>18</td><td>m</td><td>江苏省扬州市</td></tr></tbody></table><p>这张表的设计就不符合第一范式(1NF)，因为“地址”这个属性可以继续拆分成“省份”和“城市”两个属性，假设有一天公司需要统计来自某个省份或者某个城市的所有员工信息的话，这样分类就非常方便了。</p><blockquote><p>满足第一范式(1NF)的员工表重新设计如下：</p></blockquote><table><thead><tr><th><strong>empId</strong></th><th><strong>empName</strong></th><th><strong>age</strong></th><th>sex</th><th><strong>province</strong></th><th><strong>city</strong></th></tr></thead><tbody><tr><td>1</td><td>小朱</td><td>23</td><td>m</td><td>山东省</td><td>淄博市</td></tr><tr><td>2</td><td>小鲁</td><td>36</td><td>f</td><td>浙江省</td><td>绍兴市</td></tr><tr><td>3</td><td>小张</td><td>18</td><td>m</td><td>江苏省</td><td>扬州市</td></tr></tbody></table><h3 id="二-第二范式-2nf" tabindex="-1">二.第二范式(2NF) <a class="header-anchor" href="#二-第二范式-2nf" aria-label="Permalink to &quot;二.第二范式(2NF)&quot;">​</a></h3><hr><p>第二范式(2NF)是在第一范式(1NF)的基础之上更进一步，对记录的<code>唯一性</code>。第二范式需要确保数据库表中的每一列都和<code>主键</code>相关，而不能只与<code>主键</code>的某一部分相关(主要针对联合主键而言)。也就是说在一个数据库表中，<strong>一个表中只能保存一种<code>数据</code>，不可以把多种数据保存在同一张数据库表中</strong>。</p><blockquote><p>比如有一张“学生课程成绩”表：</p></blockquote><table><thead><tr><th><strong>stuId</strong></th><th><strong>stuName</strong></th><th><strong>age</strong></th><th>sex</th><th><strong>courseId</strong></th><th><strong>courseName</strong></th><th><strong>score</strong></th><th><strong>credit</strong></th></tr></thead><tbody><tr><td>1</td><td>小朱</td><td>23</td><td>m</td><td>1</td><td>数学</td><td>99</td><td>2</td></tr><tr><td>1</td><td>小朱</td><td>23</td><td>f</td><td>2</td><td>语文</td><td>89</td><td>3</td></tr><tr><td>2</td><td>小鲁</td><td>36</td><td>f</td><td>2</td><td>语文</td><td>78</td><td>3</td></tr><tr><td>3</td><td>小张</td><td>18</td><td>m</td><td>1</td><td>数学</td><td>88</td><td>2</td></tr></tbody></table><p>如果我们想从上面这张表中获取某个学生的某门成绩，只靠 <code>stuId</code> 或者 <code>courseId</code> 是没有办法唯一确定某个学生的某门课程成绩的，因此需要将 <code>stdId</code> 和 <code>courseId</code> 作为“学生课程成绩表”的<strong>联合主键</strong>，通过联合主键才能唯一确定某个学生的某门课程成绩。</p><p>在应用中使用以上关系模式会存在以下问题：</p><ul><li><strong>数据冗余</strong>：同一门课程的“学分(credit)”是和课程相关的，如果在一张表里记录了30条学生成绩，学分(credit)”也就重复了30次，造成数据冗余。</li><li><strong>更新异常</strong>：如果某一门课程的学分调整了，那么需要调整“学生课程成绩”表里涉及到的所有数据，容易造成数据的漏改、错改。</li><li><strong>插入异常</strong>：如果这时候新开了一门课程，但是由于这门课程还没有人选，学生信息只能等到有人选修的时候再插入了，会导致数据的插入异常。</li><li><strong>删除异常</strong>：如果某个学生已经结业，需要删除该学生的成绩记录，同时会删除课程信息以及该课程的学分信息，这时候如果该门课还没有新生选修就会导致课程信息丢失，造成数据保存失败。</li></ul><p>再仔细观察这张表的信息，<code>stuName</code>、<code>age</code>、<code>sex</code> 只与 <code>stuId</code> 相关，<code>courseName</code> 只与 <code>courseId</code> 相关，和第二范式(2NF)中规定的<strong>需要确保数据库表中的每一列都和主键相关</strong>这个规则相违背，所以上述这张表的设计不符合第二范式(2NF)。</p><p><strong>那么如何调整才能让其符合第二范式(2NF)呢？</strong></p><p>可以将上述“学生课程成绩表”拆分成“学生”表、“课程”表和“学生课程成绩”表。</p><blockquote><p>“学生”表：</p></blockquote><table><thead><tr><th><strong>stuId</strong></th><th><strong>stuName</strong></th><th><strong>age</strong></th><th>sex</th></tr></thead><tbody><tr><td>1</td><td>小朱</td><td>23</td><td>m</td></tr><tr><td>1</td><td>小朱</td><td>23</td><td>f</td></tr><tr><td>2</td><td>小鲁</td><td>36</td><td>f</td></tr><tr><td>3</td><td>小张</td><td>18</td><td>m</td></tr></tbody></table><blockquote><p>”课程“表</p></blockquote><table><thead><tr><th><strong>courseId</strong></th><th><strong>courseName</strong></th><th><strong>credit</strong></th></tr></thead><tbody><tr><td>1</td><td>数学</td><td>2</td></tr><tr><td>2</td><td>语文</td><td>3</td></tr><tr><td>2</td><td>语文</td><td>3</td></tr><tr><td>1</td><td>数学</td><td>2</td></tr></tbody></table><blockquote><p>“学生课程成绩”表：</p></blockquote><table><thead><tr><th><strong>stuId</strong></th><th><strong>courseId</strong></th><th><strong>score</strong></th><th><strong>credit</strong></th></tr></thead><tbody><tr><td>1</td><td>1</td><td>99</td><td>2</td></tr><tr><td>1</td><td>2</td><td>89</td><td>3</td></tr><tr><td>2</td><td>2</td><td>78</td><td>3</td></tr><tr><td>3</td><td>1</td><td>88</td><td>2</td></tr></tbody></table><blockquote><p>调整后的模型如下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img/blog/5fb108699ffe4bd193451ccdb7ce6a7d~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A1512%3A0%3A0%3A0.awebp" alt="student_course.png"></p><p>通过上述将一张表拆分成多张表的方式就实现了<strong>确保表中的每列都和主键相关，一张表只保存一种数据</strong>的目的。</p><h3 id="三-第三范式-3nf" tabindex="-1">三.第三范式(3NF) <a class="header-anchor" href="#三-第三范式-3nf" aria-label="Permalink to &quot;三.第三范式(3NF)&quot;">​</a></h3><hr><p>第三范式(3NF)<strong>需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关</strong>。</p><p>3NF是对字段的<code>冗余性</code>，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即<strong>不存在传递依赖</strong>；</p><p><strong>通过数学推导公式来表达：</strong></p><p>用 A、B、C、D 来表示表中的四个列，其中 A 为主键，其中 B → A(B依赖A)， C → A，D → A，如果还有 B → C, C → D 从这两个还可以推导出 B → D, 此时虽然满足第二范式(2NF)，但是不满足第三范式。</p><blockquote><p>以“学生”表为例：</p></blockquote><table><thead><tr><th><strong>stuId</strong></th><th><strong>stuName</strong></th><th><strong>age</strong></th><th>sex</th><th><strong>classId</strong></th><th><strong>className</strong></th><th><strong>classInfo</strong></th></tr></thead><tbody><tr><td>1</td><td>小朱</td><td>23</td><td>m</td><td>4</td><td>一班</td><td>45</td></tr><tr><td>1</td><td>小朱</td><td>23</td><td>f</td><td>4</td><td>一班</td><td>45</td></tr><tr><td>2</td><td>小鲁</td><td>36</td><td>f</td><td>2</td><td>五班</td><td>45</td></tr><tr><td>3</td><td>小张</td><td>18</td><td>m</td><td>5</td><td>二班</td><td>48</td></tr></tbody></table><p>这张表的主键是 <code>stdId</code>，因为这个属性能够确定这张表的其他属性，通过 <code>stdId</code> 就可以知道学生姓名、年龄、性别、班级编号、班级名称、班级人数信息。但是仔细观察可以发现，班级名称、班级人数还可以通过 <code>classId</code> 确定，而 <code>classId</code> 是非主属性，这样就存在了一个传递依赖，并且造成数据的冗余。</p><p>解决这个问题就需要将上述表拆成“学生”表和“班级”表，一张表记录学生信息，另一张表记录班级信息，两张表通过<strong>外键</strong>进行关联：</p><blockquote><p>学生表：</p></blockquote><table><thead><tr><th><strong>stuId</strong></th><th><strong>stuName</strong></th><th><strong>age</strong></th><th>sex</th><th><strong>classId</strong></th></tr></thead><tbody><tr><td>1</td><td>小朱</td><td>23</td><td>m</td><td>4</td></tr><tr><td>1</td><td>小朱</td><td>23</td><td>f</td><td>4</td></tr><tr><td>2</td><td>小鲁</td><td>36</td><td>f</td><td>2</td></tr><tr><td>3</td><td>小张</td><td>18</td><td>m</td><td>5</td></tr></tbody></table><blockquote><p>班级表：</p></blockquote><table><thead><tr><th><strong>classId</strong></th><th><strong>className</strong></th><th><strong>classInfo</strong></th></tr></thead><tbody><tr><td>4</td><td>一班</td><td>45</td></tr><tr><td>4</td><td>一班</td><td>45</td></tr><tr><td>2</td><td>五班</td><td>45</td></tr><tr><td>5</td><td>二班</td><td>48</td></tr></tbody></table><blockquote><p>调整后的模型如下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/zhu325/markdown-img/blog/44430b3da5d143f0bb75730bd7ad69f1~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A1512%3A0%3A0%3A0.awebp" alt="stu-class.png"></p><h3 id="四-反范式化" tabindex="-1">四.反范式化 <a class="header-anchor" href="#四-反范式化" aria-label="Permalink to &quot;四.反范式化&quot;">​</a></h3><hr><h4 id="范式化是什么" tabindex="-1">范式化是什么？ <a class="header-anchor" href="#范式化是什么" aria-label="Permalink to &quot;范式化是什么？&quot;">​</a></h4><p>在讨论反范式化之前，有必要先明确什么是范式化，要反的东西是什么？</p><blockquote><p>Database normalization is the process of structuring a relational database in accordance with a series of so-called normal forms in order to reduce data redundancy and improve data integrity.</p></blockquote><h4 id="范式化的弊端" tabindex="-1">范式化的弊端 <a class="header-anchor" href="#范式化的弊端" aria-label="Permalink to &quot;范式化的弊端&quot;">​</a></h4><p>在这些设计范式的约束下，<em>相关联的信息被存储到了不同的逻辑表中</em></p><p>以致于经常需要多表联查（<code>join</code>操作），关系越复杂，连表查询越慢</p><blockquote><p>If these relations are stored physically as separate disk files, completing a database query that draws information from several relations (a join operation) can be slow. If many relations are joined, it may be prohibitively slow.</p></blockquote><p>那么，有办法能改善查询性能吗？</p><p>有。引入冗余：</p><ul><li>允许 DBMS 存储额外的冗余信息，例如索引视图（indexed views）、物化视图（materialized views），但仍遵从设计范式</li><li>增加冗余数据，减少<code>join</code>操作，打破设计范式（即<em>反范式化</em>）</li></ul><h4 id="反范式化是什么" tabindex="-1">反范式化是什么？ <a class="header-anchor" href="#反范式化是什么" aria-label="Permalink to &quot;反范式化是什么？&quot;">​</a></h4><p>所谓反范式化，是一种针对遵从设计范式的数据库（关系模式）的性能优化策略</p><blockquote><p>Denormalization is a strategy used on a previously-normalized database to increase performance.</p></blockquote><p>P.S.注意，<em>反范式化不等于非范式化</em>（Unnormalized form），反范式化一定发生在满足范式设计的基础之上。前者相当于先遵守所有规则，再进行局部调整，故意打破一些规则，而后者全然不顾规则</p><p>通过增加冗余数据或对数据进行分组，<em>牺牲一部分写入性能，换取更高的读取性能</em>：</p><blockquote><p>In computing, denormalization is the process of trying to improve the read performance of a database, at the expense of losing some write performance, by adding redundant copies of data or by grouping data.</p></blockquote><p>在设计范式的约束下，数据表中没有冗余信息（某个数据只存放在某张表的某个单元格中），为了得到某个数据可能需要一系列的跨表查询，因而读操作性能不佳，但写操作很快，因为更新数据时只需要修改一处</p><p>反范式化就是要打破这种约束，<em>把某些数据在不同的地方多放几份</em>，以加快数据检索速度：</p><blockquote><p>The opposite of normalization, denormalization is the process of putting one fact in many places.</p></blockquote><h4 id="具体操作" tabindex="-1">具体操作 <a class="header-anchor" href="#具体操作" aria-label="Permalink to &quot;具体操作&quot;">​</a></h4><p><strong>具体地，常见做法如：</strong></p><ul><li>存一些派生数据：<em>类似于往 Redux Store 中塞计算属性</em>，把需要频繁重复计算的结果存起来，例如在一对多关系中，把“多”的数量作为“一”的属性存储起来</li><li>预先连接（pre-joined）生成汇总表：把需要频繁<code>join</code>的表提前<code>join</code>好</li><li>采用硬编码值：把依赖表中的常量值（或者不经常变化的值）直接硬编码到当前表中，从而避免<code>join</code>操作</li><li>把详情信息纳入主表中：对于数据量不大的详情表，可以把全部/部分详情信息塞到主表中，以避免<code>join</code>操作</li></ul><p>P.S.关于反范式化具体做法的更多信息，见When and How You Should Denormalize a Relational Database</p><h4 id="反范式化的代价" tabindex="-1">反范式化的代价 <a class="header-anchor" href="#反范式化的代价" aria-label="Permalink to &quot;反范式化的代价&quot;">​</a></h4><p>但除非必要，一般不建议反范式化，因其代价高昂：</p><ul><li>失去了数据完整性保障：打破范式，意味着之前通过范式化解决的更新、插入、删除异常问题又将重新冒出来，也就是说，<em>冗余数据的一致性要靠 DBA 自己来保证</em>，而不像索引视图等由 DBMS 来保证</li><li>牺牲了写入速度：由于反范式化引入了冗余数据，更新时要修改多处，但大多数场景都是读密集的，写入慢一点问题不大</li><li>浪费了存储空间：存储了不必要的冗余数据，自然会浪费一些存储空间，但空间换时间一般是可接受的（毕竟内存、硬盘等资源已经相对廉价了）</li></ul><p>P.S.一般通过约束规则（<code>constraints</code>）来保证冗余数据的一致性，但这些规则又会抵消一部分作用</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><hr><p>数据库连接会带来一部分的性能损失，并不是数据库范式越高越高，有时会在数据冗余与范式之间做出权衡，在实际的数据库开发过程中，往往会允许一部分的数据冗余来减少数据库连接</p><p><strong>参考链接</strong></p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.cnblogs.com%2Fxwdreamer%2Farchive%2F2012%2F05%2F17%2F2506039.html" target="_blank" rel="noreferrer">数据库三范式详解</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fningg.top%2Fdatabase-nf%2F" target="_blank" rel="noreferrer">数据库设计三个范式</a></li></ul>',80),s=[a];function n(h,l,c,i,p,g){return d(),o("div",null,s)}const m=t(r,[["render",n]]);export{u as __pageData,m as default};
